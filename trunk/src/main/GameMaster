import java.util.*;

public class GameMaster 
{

    private Vector listeners = new Vector(); //listeners to the state, use vector
                                            
    private Player[] players; //the players of the game
    private Board board;
    private int currentPlayerIndex = 0;
    private GameThread gameThread;
    
  

    //constructor  Creates new GameMaster
  
   
     /* The PlayerArray should have at least 1 player in it.
      The order the players occur in the array is the order in which the 
      players will move.
     If the array is empty, an ArrayOutOfBoundsException will be thrown.
     */
    public GameMaster(Board board, Player[] players ) 
    {
    
        if(players.length == 0)
        {
            System.err.println("Error, player array is empty, GameMaster() ");
            throw new ArrayIndexOutOfBoundsException("Game Master created with empty array");
        }
    
        this.board = board;
        this.players = players;
    
    }

  
  
 

    //player management
  

    private synchronized Player getCurrentPlayer()
    {
        return players[currentPlayerIndex];
    }
  

    private synchronized void advancePlayer() \\Advance the player
    {
        currentPlayerIndex ++;
        if(currentPlayerIndex >= players.length)
        {
            currentPlayerIndex = 0;
        }
    }




    //state

    /* 
       Start the game.
       Tells the board to start, starts the game loop thread
      then notifies listeners.
     */
    public synchronized void startGame()
    {
        if(gameThread != null)
        {
            gameThread.stopThread();
            gameThread = null;
        }
    
        board.gameStarted();
        currentPlayerIndex = 0;
        gameThread = new GameThread();
        gameThread.start();
        notifyListenersGameStarted();
    
    }


    /*
      Stop the game.
      Stops the game thread, tells the board the game is stopped, and
     then notifies listeners.
     */
    public synchronized void stopGame()
    {
        if(gameThread != null)
        {
            gameThread.stopThread();
            gameThread = null;
        }
    
        board.gameStoped();
        notifyListenersGameStoped();
    }

    /*
      Restart the game.
      Stops the current game loop, tells the board to restart,
      starts a new game loop, and then notifies listeneres.
     */
    public synchronized void restartGame()
    {
        if(gameThread != null)
        {
            gameThread.stopThread();
            gameThread = null;
        }
    
        board.gameRestarted();
        currentPlayerIndex = 0;
        gameThread = new GameThread();
        gameThread.start();
        notifyListenersGameReStarted();
    
    }   
  
  

    

    /* 
      The game thread class does the work of 
      making the players move.
      Exits after stop is called.
     */
    class GameThread extends Thread
    {    
    
        public boolean active = true;
    
        public void stopThread()
        {
            if(active)
            {
                active = false;
                this.interrupt();
            }
        }
    
        public  void run()
        {
            while( active && ! board.isGameOver() )
            {
        
                //get the players move.
                Player player = getCurrentPlayer();
                Move move = player.getMove((Board) board.clone());
                if(move == null)
                {
                    //ignore null moves
                    continue;
                }
        
                //if we are still active, make the move
                boolean moveMade = false;
  
                if(active)  
                {
                    moveMade = board.move(move); 
                }
        
                //if we are still active, and the move was made, notify listeners
                if(active && moveMade)
                {
                    advancePlayer();
                    notifyListenersMoveMade(move);
                }
        
        
            }
            
            if(active && board.isGameOver())
            {
                notifyListenersGameStoped();
            }

            active = false;
        }
    
  
    }
  
}


